// <auto-generated>
// RgiSequenceFinder.TableGenerator
// </auto-generated>

namespace RgiSequenceFinder
{
    partial class RgiTable
    {
        private static System.ReadOnlySpan<byte> _regionTable1 => new byte[] { 0, 0, 31, 32, 33, 34, 35, 0, 36, 0, 0, 37, 38, 0, 39, 0, 40, 41, 42, 43, 44, 0, 45, 46, 0, 47, 48, 49, 0, 50, 51, 52, 53, 54, 55, 56, 0, 57, 58, 59, 60, 0, 61, 62, 63, 64, 0, 65, 66, 0, 67, 68, 69, 0, 70, 71, 0, 72, 73, 74, 75, 0, 76, 77, 78, 79, 80, 81, 0, 82, 0, 0, 83, 84, 85, 86, 87, 88, 0, 0, 0, 0, 89, 0, 90, 0, 0, 91, 92, 0, 93, 0, 94, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 95, 96, 0, 97, 0, 98, 0, 99, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 101, 102, 103, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 105, 106, 107, 0, 108, 0, 109, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 111, 112, 0, 113, 114, 115, 116, 117, 118, 0, 0, 119, 120, 121, 0, 122, 123, 124, 125, 126, 127, 0, 128, 0, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 131, 132, 0, 0, 0, 133, 0, 134, 135, 0, 0, 0, 0, 0, 0, 0, 136, 137, 138, 0, 0, 0, 0, 0, 0, 139, 140, 141, 142, 0, 143, 144, 145, 146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 147, 0, 0, 0, 0, 0, 0, 0, 148, 0, 149, 150, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 0, 152, 153, 154, 0, 0, 0, 155, 156, 0, 157, 0, 158, 0, 0, 0, 0, 159, 0, 160, 161, 162, 163, 164, 0, 0, 0, 0, 0, 165, 0, 166, 0, 0, 0, 0, 0, 0, 167, 168, 169, 170, 171, 0, 0, 172, 0, 173, 0, 174, 175, 176, 177, 178, 179, 0, 0, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, };
        private static System.ReadOnlySpan<byte> _regionTable2 => new byte[] { 68, 0, 69, 0, 70, 71, 72, 0, 73, 0, 0, 74, 0, 0, 75, 76, 0, 77, 0, 0, 78, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 0, 0, 0, 82, 83, 84, 85, 0, 0, 86, 87, 88, 89, 0, 0, 0, 90, 91, 92, 0, 0, 93, 0, 94, 0, 95, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 98, 0, 99, 0, 100, 0, 0, 0, 101, 102, 103, 104, 105, 0, 106, 107, 108, 109, 110, 111, 112, 113, 114, 0, 0, 115, 116, 117, 0, 118, 0, 119, 120, 121, 122, 0, 123, 124, 0, 125, 126, 127, 0, 128, 129, 130, 131, 132, 133, 0, 0, 134, 0, 135, 0, 136, 137, 0, 0, 138, 139, 0, 0, 0, 0, 0, 140, 0, 0, 0, 0, 0, 141, 142, 0, 0, 0, 0, 143, 0, 0, 0, 0, 0, 144, 145, 146, 0, 147, 0, 148, 0, 149, 0, 150, 0, 0, 0, 0, 151, 0, 0, 0, 0, 0, 0, 152, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 154, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 155, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 157, 0, 0, 0, 0, 0, 0, 158, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 159, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 0, 0, 0, };

        private static int FindRegion(RegionalIndicator region)
        {
            var v = (ushort)(region.Value - 1);
            if (v >= 26 * 26) return -1;

            if (v < 13 * 26)
            {
                var i = _regionTable1[v];
                if (i == 0) return -1;
                else return i;
            }
            else
            {
                var i = _regionTable2[v - 13 * 26];
                if (i == 0) return -1;
                else return i + 128;
            }
        }
    }
}
